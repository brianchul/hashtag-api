type Campaign {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  showTag: String
  titleImgUrl: String
  description: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
}

type CampaignAggregator {
  count: Int
  totalCount: Int
}

type CampaignConnection {
  values: [Campaign]
  groupBy: CampaignGroupBy
  aggregate: CampaignAggregator
}

type CampaignConnectionCreated_at {
  key: DateTime
  connection: CampaignConnection
}

type CampaignConnectionDescription {
  key: String
  connection: CampaignConnection
}

type CampaignConnectionId {
  key: ID
  connection: CampaignConnection
}

type CampaignConnectionShowTag {
  key: String
  connection: CampaignConnection
}

type CampaignConnectionTitleImgUrl {
  key: String
  connection: CampaignConnection
}

type CampaignConnectionUpdated_at {
  key: DateTime
  connection: CampaignConnection
}

type CampaignGroupBy {
  id: [CampaignConnectionId]
  created_at: [CampaignConnectionCreated_at]
  updated_at: [CampaignConnectionUpdated_at]
  showTag: [CampaignConnectionShowTag]
  titleImgUrl: [CampaignConnectionTitleImgUrl]
  description: [CampaignConnectionDescription]
}

input CampaignInput {
  showTag: String
  titleImgUrl: String
  description: String
  posts: [ID]
}

input createCampaignInput {
  data: CampaignInput
}

type createCampaignPayload {
  campaign: Campaign
}

input createIgUserInput {
  data: IgUserInput
}

type createIgUserPayload {
  igUser: IgUsers
}

input createMediaInput {
  data: MediaInput
}

type createMediaPayload {
  media: Medias
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Posts
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteCampaignInput {
  where: InputID
}

type deleteCampaignPayload {
  campaign: Campaign
}

input deleteIgUserInput {
  where: InputID
}

type deleteIgUserPayload {
  igUser: IgUsers
}

input deleteMediaInput {
  where: InputID
}

type deleteMediaPayload {
  media: Medias
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Posts
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCampaignInput {
  showTag: String
  titleImgUrl: String
  description: String
  posts: [ID]
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editIgUserInput {
  igUserID: String
  profileImgUrl: String
  userName: String
  posts: [ID]
  create_at: DateTime
}

input editMediaInput {
  url: String
  sortID: Int
  mediasType: String
  post: ID
}

input editPostInput {
  igPostID: String
  text: String
  url: String
  postTime: DateTime
  carousel: Boolean
  campaign: ID
  medias: [ID]
  owner: ID
  tags: [ID]
  products: [ID]
  cover: String
  isExpire: Boolean
}

input editProductInput {
  sku: String
  url: String
  style: String
  series: String
  sellPrice: Int
  originPrice: Int
  imgUrl: String
  posts: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTagInput {
  tagName: String
  posts: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type ForgotPassword {
  ok: Boolean
}

input IgUserInput {
  igUserID: String!
  profileImgUrl: String
  userName: String
  posts: [ID]
  create_at: DateTime
}

type IgUsers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  profileImgUrl: String
  userName: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
}

type IgUsersAggregator {
  count: Int
  totalCount: Int
}

type IgUsersConnection {
  values: [IgUsers]
  groupBy: IgUsersGroupBy
  aggregate: IgUsersAggregator
}

type IgUsersConnectionCreated_at {
  key: DateTime
  connection: IgUsersConnection
}

type IgUsersConnectionId {
  key: ID
  connection: IgUsersConnection
}

type IgUsersConnectionProfileImgUrl {
  key: String
  connection: IgUsersConnection
}

type IgUsersConnectionUpdated_at {
  key: DateTime
  connection: IgUsersConnection
}

type IgUsersConnectionUserName {
  key: String
  connection: IgUsersConnection
}

type IgUsersGroupBy {
  id: [IgUsersConnectionId]
  created_at: [IgUsersConnectionCreated_at]
  updated_at: [IgUsersConnectionUpdated_at]
  profileImgUrl: [IgUsersConnectionProfileImgUrl]
  userName: [IgUsersConnectionUserName]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

input MediaInput {
  url: String
  sortID: Int
  mediasType: String
  post: ID
}

type Medias {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  url: String
  sortID: Int
  mediasType: String
  post: Posts
}

type MediasAggregator {
  count: Int
  totalCount: Int
  sum: MediasAggregatorSum
  avg: MediasAggregatorAvg
  min: MediasAggregatorMin
  max: MediasAggregatorMax
}

type MediasAggregatorAvg {
  sortID: Float
}

type MediasAggregatorMax {
  sortID: Float
}

type MediasAggregatorMin {
  sortID: Float
}

type MediasAggregatorSum {
  sortID: Float
}

type MediasConnection {
  values: [Medias]
  groupBy: MediasGroupBy
  aggregate: MediasAggregator
}

type MediasConnectionCreated_at {
  key: DateTime
  connection: MediasConnection
}

type MediasConnectionId {
  key: ID
  connection: MediasConnection
}

type MediasConnectionMediasType {
  key: String
  connection: MediasConnection
}

type MediasConnectionPost {
  key: ID
  connection: MediasConnection
}

type MediasConnectionSortID {
  key: Int
  connection: MediasConnection
}

type MediasConnectionUpdated_at {
  key: DateTime
  connection: MediasConnection
}

type MediasConnectionUrl {
  key: String
  connection: MediasConnection
}

type MediasGroupBy {
  id: [MediasConnectionId]
  created_at: [MediasConnectionCreated_at]
  updated_at: [MediasConnectionUpdated_at]
  url: [MediasConnectionUrl]
  sortID: [MediasConnectionSortID]
  mediasType: [MediasConnectionMediasType]
  post: [MediasConnectionPost]
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | Campaign | CampaignConnection | CampaignAggregator | CampaignGroupBy | CampaignConnectionId | CampaignConnectionCreated_at | CampaignConnectionUpdated_at | CampaignConnectionShowTag | CampaignConnectionTitleImgUrl | CampaignConnectionDescription | createCampaignPayload | updateCampaignPayload | deleteCampaignPayload | IgUsers | IgUsersConnection | IgUsersAggregator | IgUsersGroupBy | IgUsersConnectionId | IgUsersConnectionCreated_at | IgUsersConnectionUpdated_at | IgUsersConnectionProfileImgUrl | IgUsersConnectionUserName | createIgUserPayload | updateIgUserPayload | deleteIgUserPayload | Medias | MediasConnection | MediasAggregator | MediasAggregatorSum | MediasAggregatorAvg | MediasAggregatorMin | MediasAggregatorMax | MediasGroupBy | MediasConnectionId | MediasConnectionCreated_at | MediasConnectionUpdated_at | MediasConnectionUrl | MediasConnectionSortID | MediasConnectionMediasType | MediasConnectionPost | createMediaPayload | updateMediaPayload | deleteMediaPayload | Posts | PostsConnection | PostsAggregator | PostsGroupBy | PostsConnectionId | PostsConnectionCreated_at | PostsConnectionUpdated_at | PostsConnectionIgPostID | PostsConnectionText | PostsConnectionUrl | PostsConnectionPostTime | PostsConnectionCarousel | PostsConnectionCampaign | PostsConnectionOwner | PostsConnectionCover | createPostPayload | updatePostPayload | deletePostPayload | Product | ProductConnection | ProductAggregator | ProductAggregatorSum | ProductAggregatorAvg | ProductAggregatorMin | ProductAggregatorMax | ProductGroupBy | ProductConnectionId | ProductConnectionCreated_at | ProductConnectionUpdated_at | ProductConnectionSku | ProductConnectionUrl | ProductConnectionStyle | ProductConnectionSeries | ProductConnectionSellPrice | ProductConnectionOriginPrice | ProductConnectionImgUrl | createProductPayload | updateProductPayload | deleteProductPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_at | TagConnectionUpdated_at | TagConnectionTagName | createTagPayload | updateTagPayload | deleteTagPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCampaign(input: createCampaignInput): createCampaignPayload
  updateCampaign(input: updateCampaignInput): updateCampaignPayload
  deleteCampaign(input: deleteCampaignInput): deleteCampaignPayload
  createIgUser(input: createIgUserInput): createIgUserPayload
  updateIgUser(input: updateIgUserInput): updateIgUserPayload
  deleteIgUser(input: deleteIgUserInput): deleteIgUserPayload
  createMedia(input: createMediaInput): createMediaPayload
  updateMedia(input: updateMediaInput): updateMediaPayload
  deleteMedia(input: deleteMediaInput): deleteMediaPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

input PostInput {
  igPostID: String
  text: String
  url: String
  postTime: DateTime
  carousel: Boolean
  campaign: ID
  medias: [ID]
  owner: ID
  tags: [ID]
  products: [ID]
  cover: String
  isExpire: Boolean!
}

type Posts {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  igPostID: String
  text: String
  url: String
  postTime: DateTime
  carousel: Boolean
  campaign: Campaign
  owner: IgUsers
  cover: String
  medias(sort: String, limit: Int, start: Int, where: JSON): [Medias]
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type PostsAggregator {
  count: Int
  totalCount: Int
}

type PostsConnection {
  values: [Posts]
  groupBy: PostsGroupBy
  aggregate: PostsAggregator
}

type PostsConnectionCampaign {
  key: ID
  connection: PostsConnection
}

type PostsConnectionCarousel {
  key: Boolean
  connection: PostsConnection
}

type PostsConnectionCover {
  key: String
  connection: PostsConnection
}

type PostsConnectionCreated_at {
  key: DateTime
  connection: PostsConnection
}

type PostsConnectionId {
  key: ID
  connection: PostsConnection
}

type PostsConnectionIgPostID {
  key: String
  connection: PostsConnection
}

type PostsConnectionOwner {
  key: ID
  connection: PostsConnection
}

type PostsConnectionPostTime {
  key: DateTime
  connection: PostsConnection
}

type PostsConnectionText {
  key: String
  connection: PostsConnection
}

type PostsConnectionUpdated_at {
  key: DateTime
  connection: PostsConnection
}

type PostsConnectionUrl {
  key: String
  connection: PostsConnection
}

type PostsGroupBy {
  id: [PostsConnectionId]
  created_at: [PostsConnectionCreated_at]
  updated_at: [PostsConnectionUpdated_at]
  igPostID: [PostsConnectionIgPostID]
  text: [PostsConnectionText]
  url: [PostsConnectionUrl]
  postTime: [PostsConnectionPostTime]
  carousel: [PostsConnectionCarousel]
  campaign: [PostsConnectionCampaign]
  owner: [PostsConnectionOwner]
  cover: [PostsConnectionCover]
}

type Product {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  sku: String
  url: String
  style: String
  series: String
  sellPrice: Int
  originPrice: Int
  imgUrl: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
}

type ProductAggregator {
  count: Int
  totalCount: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorAvg {
  sellPrice: Float
  originPrice: Float
}

type ProductAggregatorMax {
  sellPrice: Float
  originPrice: Float
}

type ProductAggregatorMin {
  sellPrice: Float
  originPrice: Float
}

type ProductAggregatorSum {
  sellPrice: Float
  originPrice: Float
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductConnectionCreated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnectionImgUrl {
  key: String
  connection: ProductConnection
}

type ProductConnectionOriginPrice {
  key: Int
  connection: ProductConnection
}

type ProductConnectionSellPrice {
  key: Int
  connection: ProductConnection
}

type ProductConnectionSeries {
  key: String
  connection: ProductConnection
}

type ProductConnectionSku {
  key: String
  connection: ProductConnection
}

type ProductConnectionStyle {
  key: String
  connection: ProductConnection
}

type ProductConnectionUpdated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionUrl {
  key: String
  connection: ProductConnection
}

type ProductGroupBy {
  id: [ProductConnectionId]
  created_at: [ProductConnectionCreated_at]
  updated_at: [ProductConnectionUpdated_at]
  sku: [ProductConnectionSku]
  url: [ProductConnectionUrl]
  style: [ProductConnectionStyle]
  series: [ProductConnectionSeries]
  sellPrice: [ProductConnectionSellPrice]
  originPrice: [ProductConnectionOriginPrice]
  imgUrl: [ProductConnectionImgUrl]
}

input ProductInput {
  sku: String
  url: String
  style: String
  series: String
  sellPrice: Int
  originPrice: Int
  imgUrl: String
  posts: [ID]
}

type Query {
  campaign(id: ID!): Campaign
  campaigns(sort: String, limit: Int, start: Int, where: JSON): [Campaign]
  campaignsConnection(sort: String, limit: Int, start: Int, where: JSON): CampaignConnection
  igUser(id: ID!): IgUsers
  igUsers(sort: String, limit: Int, start: Int, where: JSON): [IgUsers]
  igUsersConnection(sort: String, limit: Int, start: Int, where: JSON): IgUsersConnection
  media(id: ID!): Medias
  medias(sort: String, limit: Int, start: Int, where: JSON): [Medias]
  mediasConnection(sort: String, limit: Int, start: Int, where: JSON): MediasConnection
  post(id: ID!): Posts
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostsConnection
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  tagName: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionTagName {
  key: String
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  tagName: [TagConnectionTagName]
}

input TagInput {
  tagName: String
  posts: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateCampaignInput {
  where: InputID
  data: editCampaignInput
}

type updateCampaignPayload {
  campaign: Campaign
}

input updateIgUserInput {
  where: InputID
  data: editIgUserInput
}

type updateIgUserPayload {
  igUser: IgUsers
}

input updateMediaInput {
  where: InputID
  data: editMediaInput
}

type updateMediaPayload {
  media: Medias
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Posts
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
